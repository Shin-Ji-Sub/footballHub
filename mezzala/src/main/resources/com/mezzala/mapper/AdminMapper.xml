<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mezzala.mapper.AdminMapper">
    <resultMap id="UserResultMap" type="com.mezzala.dto.UserDto">
        <id property="userId" column="u_user_id"/>
        <result property="nickname" column="u_nickname"/>
        <result property="socialMethod" column="u_social_method"/>
        <result property="joinDate" column="u_join_date"/>
        <result property="roleId" column="u_role_id"/>
        <result property="state" column="u_state"/>
        <result property="writeBoardCount" column="writeBoardCount"/>
        <result property="writeCommentCount" column="writeCommentCount"/>
        <result property="reportCount" column="reportCount"/>
        <result property="userScore" column="userScore"/>
        <!-- 1:1 관계 user_role -->
        <association property="userRole" javaType="com.mezzala.dto.UserRoleDto">
            <id property="roleId" column="ur_role_id" />
            <result property="roleName" column="ur_role_name" />
            <result property="roleKorName" column="ur_role_kor_name" />
        </association>
    </resultMap>
    <resultMap id="BoardLargeCategoryResultMap" type="com.mezzala.dto.BoardLargeCategoryDto">
        <id property="largeCategoryId" column="large_category_id" />
        <result property="largeCategoryName" column="large_category_name" />
        <collection property="smallCategories" ofType="com.mezzala.dto.BoardSmallCategoryDto">
            <id property="smallCategoryIndex" column="small_category_index" />
            <result property="largeCategoryId" column="large_category_id" />
            <result property="smallCategoryName" column="small_category_name"/>
        </collection>
    </resultMap>
    <!-- <id> → <result> → <association> → <collection> 순서를 지켜야함!-->
    <resultMap id="BoardResultMap" type="com.mezzala.dto.BoardDto">
        <id property="boardId" column="board_id" />
        <result property="subject" column="subject" />
        <result property="content" column="content" />
        <result property="regDate" column="reg_date" />
        <result property="visitCount" column="visit_count" />
        <result property="recommendationCount" column="recommendationCount" />
        <result property="reportCount" column="reportCount" />
        <result property="commentCount" column="commentCount" />
        <result property="boardState" column="board_state" />
        <!-- 1:1 관계 user -->
        <association property="user" javaType="com.mezzala.dto.UserDto">
            <id property="userId" column="user_id" />
            <result property="nickname" column="nickname" />
            <result property="socialMethod" column="social_method" />
            <result property="joinDate" column="join_date" />
            <result property="roleId" column="role_id" />
            <result property="state" column="state" />
        </association>
        <!-- 1:1 관계 board_large_category -->
        <association property="largeCategory" javaType="com.mezzala.dto.BoardLargeCategoryDto">
            <id property="largeCategoryId" column="large_category_id" />
            <result property="largeCategoryName" column="large_category_name" />
        </association>
        <!-- 1:1 관계 board_small_category -->
        <association property="smallCategory" javaType="com.mezzala.dto.BoardSmallCategoryDto">
            <id property="smallCategoryIndex" column="small_category_index" />
            <result property="smallCategoryName" column="small_category_name" />
        </association>
        <!-- 1:N 관계 board_attach -->
        <collection property="boardAttaches" ofType="com.mezzala.dto.BoardAttachDto">
            <id property="attachId" column="attach_id" />
            <result property="userFileName" column="user_file_name" />
            <result property="savedFileName" column="saved_file_name" />
        </collection>
        <!-- 1:N 관계 user_action -->
        <collection property="userActions" ofType="com.mezzala.dto.UserActionDto">
            <id property="actionId" column="action_id"/>
            <result property="actionCategory" column="action_category"/>
            <result property="userId" column="user_id"/>
            <result property="boardId" column="board_id"/>
        </collection>
    </resultMap>
    <resultMap id="CommentResultMap" type="com.mezzala.dto.CommentDto">
        <id property="commentId" column="c_comment_id"/>
        <result property="parentId" column="c_parent_id"/>
        <result property="regDate" column="c_reg_date"/>
        <result property="content" column="c_content"/>
        <result property="recommendationCount" column="c1_recommendation_count"/>
        <result property="reportCount" column="c_reportCount" />
        <result property="commentState" column="c_comment_state"/>
        <result property="userId" column="c_user_id"/>
        <result property="boardId" column="c_board_id"/>
        <association property="board" javaType="com.mezzala.dto.BoardDto">
            <id property="boardId" column="b_board_id" />
            <result property="subject" column="b_subject" />
            <result property="content" column="b_content" />
            <result property="regDate" column="b_reg_date" />
            <result property="visitCount" column="b_visit_count" />
            <result property="boardState" column="b_board_state" />
            <result property="largeCategoryId" column="b_large_category_id"/>
            <result property="smallCategoryIndex" column="b_small_category_index"/>
            <!-- 1:1 관계 board_large_category -->
            <association property="largeCategory" javaType="com.mezzala.dto.BoardLargeCategoryDto">
                <id property="largeCategoryId" column="lc_large_category_id" />
                <result property="largeCategoryName" column="lc_large_category_name" />
            </association>
            <!-- 1:1 관계 board_small_category -->
            <association property="smallCategory" javaType="com.mezzala.dto.BoardSmallCategoryDto">
                <id property="smallCategoryIndex" column="sc_small_category_index" />
                <result property="smallCategoryName" column="sc_small_category_name" />
            </association>
        </association>
        <association property="user" javaType="com.mezzala.dto.UserDto">
            <id property="userId" column="u_user_id" />
            <result property="nickname" column="u_nickname" />
            <result property="socialMethod" column="u_social_method" />
            <result property="joinDate" column="u_join_date" />
            <result property="roleId" column="u_role_id" />
            <result property="state" column="u_state" />
        </association>
    </resultMap>
    <resultMap id="CommentActionResultMap" type="com.mezzala.dto.CommentActionDto">
        <id property="actionId" column="ca_action_id"/>
        <result property="userId" column="ca_user_id"/>
        <result property="commentId" column="ca_comment_id"/>
        <association property="comment" javaType="com.mezzala.dto.CommentDto">
            <id property="commentId" column="c_comment_id"/>
            <result property="parentId" column="c_parent_id"/>
            <result property="regDate" column="c_reg_date"/>
            <result property="content" column="c_content"/>
            <result property="commentState" column="c_comment_state"/>
            <result property="userId" column="c_user_id"/>
            <result property="boardId" column="c_board_id"/>
        </association>
    </resultMap>

    <insert id="insertBoard" parameterType="BoardDto" useGeneratedKeys="true" keyProperty="boardId">
        INSERT INTO
            board (
                subject,
                content,
                user_id,
                large_category_id
            )
        VALUES (
                #{subject},
                #{content},
                #{userId},
                #{largeCategoryId}
            )
    </insert>

    <insert id="insertBoardAttach" parameterType="hashmap">
        INSERT INTO
            board_attach (
                user_file_name,
                saved_file_name,
                board_id
            )
        VALUES
            <foreach collection="imageFiles" item="file" separator=",">
                (
                    #{file.userFileName},
                    #{file.savedFileName},
                    #{boardId}
                )
            </foreach>
    </insert>

    <select id="selectAllNoticeBoardCount" parameterType="hashmap" resultType="int">
        SELECT
            COUNT(*)
        FROM
            board b
        WHERE
            b.board_state = #{state}
        AND
            b.large_category_id = 3
        <choose>
            <when test="searchValue.length != null and searchValue != ''">
                AND
                    b.subject LIKE CONCAT('%', #{searchValue}, '%')
            </when>
        </choose>
    </select>

    <select id="selectNoticeBoardWithPaging" parameterType="hashmap" resultMap="BoardResultMap">
        SELECT
            b.board_id,
            b.subject,
            b.content,
            b.reg_date,
            b.visit_count,
            COALESCE(COUNT(DISTINCT ua.action_id), 0) AS recommendationCount,
            COALESCE(COUNT(DISTINCT c.comment_id), 0) AS commentCount,
            b.board_state,
            u.user_id,
            u.nickname,
            u.social_method,
            u.join_date,
            u.role_id,
            u.state,
            MAX(ba.attach_id) AS attach_id,
            MAX(ba.user_file_name) AS user_file_name,
            MAX(ba.saved_file_name) AS saved_file_name,
            lc.large_category_id,
            lc.large_category_name,
            sc.small_category_index,
            sc.small_category_name
        FROM
            board b
        LEFT JOIN
            user_action ua
        ON
            b.board_id = ua.board_id
        AND
            ua.action_category = "like"
        LEFT JOIN
            comment c
        ON
            b.board_id = c.board_id
        LEFT JOIN
            user u
        ON
            b.user_id = u.user_id
        LEFT JOIN
            board_attach ba
        ON
            b.board_id = ba.board_id
        LEFT JOIN
            board_large_category lc
        ON
            b.large_category_id = lc.large_category_id
        LEFT JOIN
            board_small_category sc
        ON
            b.small_category_index = sc.small_category_index
        WHERE
            b.board_state = #{state}
        AND
            b.large_category_id = 3
        <choose>
            <when test="searchValue.length != null and searchValue != ''">
                AND
                    b.subject LIKE CONCAT('%', #{searchValue}, '%')
            </when>
        </choose>
        GROUP BY
            b.board_id
        ORDER BY
            b.reg_date DESC
        LIMIT
            <choose>
                <when test="state == true">
                    5
                </when>
                <when test="state == false">
                    10
                </when>
            </choose>
        OFFSET
            #{start}
    </select>

    <update id="updateBoardState" parameterType="hashmap">
        UPDATE
            board
        SET
            board_state = #{state}
        WHERE
            board_id = #{boardId}
    </update>

    <update id="updateVisitedBoard" parameterType="int">
        UPDATE
            board
        SET
            visit_count = visit_count + 1
        WHERE
            board_id = #{boardId}
    </update>

    <select id="selectNoticeBoardWithBoardId" parameterType="int" resultMap="BoardResultMap">
        SELECT
            b.board_id,
            b.subject,
            b.content,
            b.reg_date,
            b.visit_count,
            b.board_state,
            u.user_id,
            u.nickname,
            u.social_method,
            u.join_date,
            u.role_id,
            u.state,
            ba.attach_id,
            ba.user_file_name,
            ba.saved_file_name,
            lc.large_category_id,
            lc.large_category_name,
            ua.action_id,
            ua.action_category,
            ua.user_id,
            ua.board_id
        FROM
            board b
        LEFT JOIN
            user_action ua
        ON
            b.board_id = ua.board_id
        AND
            ua.action_category = "like"
        LEFT JOIN
            user u
        ON
            b.user_id = u.user_id
        LEFT JOIN
            board_attach ba
        ON
            b.board_id = ba.board_id
        LEFT JOIN
            board_large_category lc
        ON
            b.large_category_id = lc.large_category_id
        WHERE
            b.board_id = #{boardId}
    </select>

    <update id="updateBoardsState" parameterType="list">
        UPDATE
            board
        SET
            board_state = true
        WHERE
            large_category_id = 3
        AND
            board_id
        IN
            <foreach collection="list" item="id" open="(" separator="," close=")">
                #{id}
            </foreach>
    </update>

    <select id="selectCategories" resultMap="BoardLargeCategoryResultMap">
        SELECT
            large.large_category_id,
            large.large_category_name,
            small.small_category_index,
            small.large_category_id,
            small.small_category_name
        FROM
            board_large_category large
        LEFT JOIN
            board_small_category small
        ON
            large.large_category_id = small.large_category_id
        ORDER BY
            small.small_category_index;
    </select>

    <select id="selectAllBoardCount" parameterType="hashmap" resultType="int">
        SELECT
            COUNT(*)
        FROM
            board b
        LEFT JOIN
            report r
        ON
            b.board_id = r.reported_content_id
        AND
            r.report_category = "board"
        LEFT JOIN
            board_large_category lc
        ON
            b.large_category_id = lc.large_category_id
        LEFT JOIN
            board_small_category sc
        ON
            b.small_category_index = sc.small_category_index
        WHERE
            b.large_category_id != 3
        <choose>
            <when test="totalSelectValue == '신고된글'">
                AND
                b.board_id = r.reported_content_id
            </when>
            <when test="totalSelectValue != 'all' and smallSelectValue == 'all'">
                AND
                    b.large_category_id = #{totalSelectValue}
            </when>
            <when test="totalSelectValue != 'all' and smallSelectValue != 'all'">
                AND
                    b.large_category_id = #{totalSelectValue}
                AND
                    b.small_category_index = #{smallSelectValue}
            </when>
        </choose>
        <choose>
            <when test="searchValue.length != null and searchValue != ''">
                AND
                    b.subject LIKE CONCAT('%', #{searchValue}, '%')
            </when>
        </choose>
    </select>

    <select id="selectBoardWithPaging" parameterType="hashmap" resultMap="BoardResultMap">
        SELECT
            b.board_id,
            b.subject,
            b.content,
            b.reg_date,
            b.visit_count,
            COALESCE(COUNT(DISTINCT ua.action_id), 0) AS recommendationCount,
            COALESCE(COUNT(DISTINCT c.comment_id), 0) AS commentCount,
            b.board_state,
            u.user_id,
            u.nickname,
            u.social_method,
            u.join_date,
            u.role_id,
            u.state,
            MAX(ba.attach_id) AS attach_id,
            MAX(ba.user_file_name) AS user_file_name,
            MAX(ba.saved_file_name) AS saved_file_name,
            lc.large_category_id,
            lc.large_category_name,
            sc.small_category_index,
            sc.small_category_name,
            COALESCE(COUNT(DISTINCT r.report_id), 0) AS reportCount
        FROM
            board b
        LEFT JOIN
            report r
        ON
            b.board_id = r.reported_content_id
        AND
            r.report_category = "board"
        LEFT JOIN
            user_action ua
        ON
            b.board_id = ua.board_id
        AND
            ua.action_category = "like"
        LEFT JOIN
            comment c
        ON
            b.board_id = c.board_id
        LEFT JOIN
            user u
        ON
            b.user_id = u.user_id
        LEFT JOIN
            board_attach ba
        ON
            b.board_id = ba.board_id
        LEFT JOIN
            board_large_category lc
        ON
            b.large_category_id = lc.large_category_id
        LEFT JOIN
            board_small_category sc
        ON
            b.small_category_index = sc.small_category_index
        WHERE
            b.board_state = true
        AND
            b.large_category_id != 3
        <choose>
            <when test="totalSelectValue == '신고된글'">
                AND
                b.board_id = r.reported_content_id
            </when>
            <when test="totalSelectValue != 'all' and smallSelectValue == 'all'">
                AND
                    b.large_category_id = #{totalSelectValue}
            </when>
            <when test="totalSelectValue != 'all' and smallSelectValue != 'all'">
                AND
                    b.large_category_id = #{totalSelectValue}
                AND
                    b.small_category_index = #{smallSelectValue}
            </when>
        </choose>
        <choose>
            <when test="searchValue.length != null and searchValue != ''">
                AND
                    b.subject LIKE CONCAT('%', #{searchValue}, '%')
            </when>
        </choose>
        GROUP BY
            b.board_id
        ORDER BY
            <choose>
                <when test="totalSelectValue == '신고된글' and sortValue == 'latest'">
                    COALESCE(COUNT(DISTINCT r.report_id), 0) DESC,
                    b.reg_date DESC
                </when>
                <when test="totalSelectValue == '신고된글' and sortValue == 'best'">
                    COALESCE(COUNT(DISTINCT r.report_id), 0) DESC,
                    b.visit_count + (COUNT(ua.board_id) * 2) DESC,
                    b.reg_date DESC
                </when>
                <when test="sortValue == 'latest' and totalSelectValue != '신고된글'">
                    b.reg_date DESC
                </when>
                <when test="sortValue == 'best' and totalSelectValue != '신고된글'">
                    b.visit_count + (COUNT(ua.board_id) * 2) DESC,
                    b.reg_date DESC
                </when>
            </choose>
        LIMIT
            10
        OFFSET
            #{start}
    </select>

    <select id="selectBoardWithBoardId" parameterType="int" resultMap="BoardResultMap">
        SELECT
            b.board_id,
            b.subject,
            b.content,
            b.reg_date,
            b.visit_count,
            b.board_state,
            u.user_id,
            u.nickname,
            u.social_method,
            u.join_date,
            u.role_id,
            u.state,
            ba.attach_id,
            ba.user_file_name,
            ba.saved_file_name,
            lc.large_category_id,
            lc.large_category_name,
            sc.small_category_index,
            sc.small_category_name,
            ua.action_id,
            ua.action_category,
            ua.user_id,
            ua.board_id
        FROM
            board b
        LEFT JOIN
            user_action ua
        ON
            b.board_id = ua.board_id
        AND
            ua.action_category = "like"
        LEFT JOIN
            user u
        ON
            b.user_id = u.user_id
        LEFT JOIN
            board_attach ba
        ON
            b.board_id = ba.board_id
        LEFT JOIN
            board_large_category lc
        ON
            b.large_category_id = lc.large_category_id
        LEFT JOIN
            board_small_category sc
        ON
            b.small_category_index = sc.small_category_index
        WHERE
            b.board_id = #{boardId}
    </select>

    <select id="selectAllReportBoardCount" parameterType="int" resultType="int">
        SELECT
            COUNT(*)
        FROM
            board b
        LEFT JOIN
            report r
        ON
            b.board_id = r.reported_content_id
        AND
            r.report_category = "board"
        LEFT JOIN
            board_large_category lc
        ON
            b.large_category_id = lc.large_category_id
        LEFT JOIN
            board_small_category sc
        ON
            b.small_category_index = sc.small_category_index
        WHERE
            b.large_category_id != 3
        AND
            b.board_id = r.reported_content_id
        <choose>
            <when test="searchValue.length != null and searchValue != ''">
                AND
                    b.subject LIKE CONCAT('%', #{searchValue}, '%')
            </when>
        </choose>
    </select>

    <select id="selectReportBoardWithPaging" parameterType="hashmap" resultMap="BoardResultMap">
        SELECT
            b.board_id,
            b.subject,
            b.content,
            b.reg_date,
            b.visit_count,
            COALESCE(COUNT(DISTINCT ua.action_id), 0) AS recommendationCount,
            COALESCE(COUNT(DISTINCT c.comment_id), 0) AS commentCount,
            b.board_state,
            u.user_id,
            u.nickname,
            u.social_method,
            u.join_date,
            u.role_id,
            u.state,
            MAX(ba.attach_id) AS attach_id,
            MAX(ba.user_file_name) AS user_file_name,
            MAX(ba.saved_file_name) AS saved_file_name,
            lc.large_category_id,
            lc.large_category_name,
            sc.small_category_index,
            sc.small_category_name,
            COALESCE(COUNT(DISTINCT r.report_id), 0) AS reportCount
        FROM
            board b
        LEFT JOIN
            report r
        ON
            b.board_id = r.reported_content_id
        AND
            r.report_category = "board"
        LEFT JOIN
            user_action ua
        ON
            b.board_id = ua.board_id
        AND
            ua.action_category = "like"
        LEFT JOIN
            comment c
        ON
            b.board_id = c.board_id
        LEFT JOIN
            user u
        ON
            b.user_id = u.user_id
        LEFT JOIN
            board_attach ba
        ON
            b.board_id = ba.board_id
        LEFT JOIN
            board_large_category lc
        ON
            b.large_category_id = lc.large_category_id
        LEFT JOIN
            board_small_category sc
        ON
            b.small_category_index = sc.small_category_index
        WHERE
            b.board_state = true
        AND
            b.large_category_id != 3
        AND
            b.board_id = r.reported_content_id
        <choose>
            <when test="searchValue.length != null and searchValue != ''">
                AND
                    b.subject LIKE CONCAT('%', #{searchValue}, '%')
            </when>
        </choose>
        GROUP BY
            b.board_id
        ORDER BY
            <choose>
                <when test="sortValue == 'reportOrder'">
                    COALESCE(COUNT(DISTINCT r.report_id), 0) DESC,
                    b.reg_date DESC
                </when>
                <when test="sortValue == 'latest'">
                    b.reg_date DESC
                </when>
            </choose>
        LIMIT
            10
        OFFSET
            #{start}
    </select>

    <select id="selectAllReportBoardCommentCount" parameterType="String" resultType="int">
        SELECT
            COUNT(DISTINCT c.comment_id)
        FROM
            comment c
        LEFT JOIN
            report r
        ON
            c.comment_id = r.reported_content_id
        AND
            r.report_category = "comment"
        WHERE
            c.comment_state = true
        AND
            c.comment_id = r.reported_content_id
        <choose>
            <when test="searchValue.length != null and searchValue != ''">
                AND
                    c.content LIKE CONCAT('%', #{searchValue}, '%')
            </when>
        </choose>
    </select>

    <select id="selectReportBoardCommentWithPaging" parameterType="hashmap" resultMap="CommentResultMap">
        SELECT
            c.comment_id AS c_comment_id,
            c.parent_id AS c_parent_id,
            c.reg_date AS c_reg_date,
            c.content AS c_content,
            c.comment_state AS c_comment_state,
            c.user_id AS c_user_id,
            c.board_id AS c_board_id,

            b.board_id AS b_board_id,
            b.subject AS b_subject,
            b.content AS b_content,
            b.reg_date AS b_reg_date,
            b.visit_count AS b_visit_count,
            b.board_state AS b_board_state,
            b.user_id AS b_user_id,
            b.large_category_id AS b_large_category_id,
            b.small_category_index AS b_small_category_index,

            lc.large_category_id AS lc_large_category_id,
            lc.large_category_name AS lc_large_category_name,

            sc.small_category_index AS sc_small_category_index,
            sc.small_category_name AS sc_small_category_name,

            COALESCE(COUNT(DISTINCT r.report_id), 0) AS c_reportCount,

            u.user_id AS u_user_id,
            u.nickname AS u_nickname,
            u.social_method AS u_social_method,
            u.join_date AS u_join_date,
            u.role_id AS u_role_id,
            u.state AS u_state
        FROM
            comment c
        LEFT JOIN
            user u
        ON
            c.user_id = u.user_id
        LEFT JOIN
            report r
        ON
            c.comment_id = r.reported_content_id
        AND
            r.report_category = "comment"
        LEFT JOIN
            board b
        ON
            c.board_id = b.board_id
        LEFT JOIN
            board_large_category lc
        ON
            b.large_category_id = lc.large_category_id
        LEFT JOIN
            board_small_category sc
        ON
            b.small_category_index = sc.small_category_index
        WHERE
            c.comment_state = true
        AND
            c.comment_id = r.reported_content_id
        <choose>
            <when test="searchValue.length != null and searchValue != ''">
                AND
                    c.content LIKE CONCAT('%', #{searchValue}, '%')
            </when>
        </choose>
        GROUP BY
            c.comment_id
        ORDER BY
            <choose>
                <when test="sortValue == 'reportOrder'">
                    COALESCE(COUNT(DISTINCT r.report_id), 0) DESC,
                    c.reg_date DESC
                </when>
                <when test="sortValue == 'latest'">
                    c.reg_date DESC
                </when>
            </choose>
        LIMIT
            10
        OFFSET
            #{start}
    </select>

    <select id="selectAllLargeCategoryCount" resultType="int">
        SELECT
            COUNT(*)
        FROM
            board_large_category
    </select>

    <select id="selectAllSmallCategoryCount" parameterType="int" resultType="int">
        SELECT
            COUNT(*)
        FROM
            board_small_category sc
        LEFT JOIN
            board_large_category lc
        ON
            sc.large_category_id = lc.large_category_id
        WHERE
            sc.large_category_id = #{largeCategoryValue}
    </select>

    <select id="selectLargeCategory" parameterType="int" resultType="BoardLargeCategoryDto">
        SELECT
            large_category_id AS largeCategoryId,
            large_category_name AS largeCategoryName
        FROM
            board_large_category
        ORDER BY
            large_category_id DESC
        LIMIT
            10
        OFFSET
            #{start}
    </select>

    <select id="selectAllLargeCategory" resultType="BoardLargeCategoryDto">
        SELECT
            large_category_id AS largeCategoryId,
            large_category_name AS largeCategoryName
        FROM
            board_large_category
        ORDER BY
            large_category_id ASC
    </select>

    <select id="selectSmallCategory" parameterType="hashmap" resultType="BoardSmallCategoryDto">
        SELECT
            sc.small_category_index AS smallCategoryIndex,
            sc.large_category_id AS largeCategoryId,
            sc.small_category_name AS smallCategoryName
        FROM
            board_small_category sc
        LEFT JOIN
            board_large_category lc
        ON
            sc.large_category_id = lc.large_category_id
        WHERE
            sc.large_category_id = #{largeCategoryValue}
        ORDER BY
            small_category_index DESC
        LIMIT
            10
        OFFSET
            #{start}
    </select>

    <insert id="insertLargeCategory" parameterType="String">
        INSERT INTO
            board_large_category (
                large_category_name
            )
        VALUES (
                #{categoryValue}
            )
    </insert>

    <insert id="insertSmallCategory" parameterType="hashmap">
        INSERT INTO
            board_small_category (
                large_category_id,
                small_category_name
            )
        VALUES (
                #{largeCategoryValue},
                #{categoryValue}
            )
    </insert>

    <update id="updateLargeCategory" parameterType="hashmap">
        UPDATE
            board_large_category
        SET
            large_category_name = #{categoryName}
        WHERE
            large_category_id = #{categoryId}
    </update>

    <update id="updateSmallCategory" parameterType="hashmap">
        UPDATE
            board_small_category
        SET
            small_category_name = #{categoryName}
        WHERE
            small_category_index = #{categoryId}
    </update>

    <delete id="deleteLargeCategory" parameterType="int">
        DELETE FROM
            board_large_category
        WHERE
            large_category_id = #{categoryId}
    </delete>

    <delete id="deleteSmallCategory" parameterType="int">
        DELETE FROM
            board_small_category
        WHERE
            small_category_index = #{categoryId}
    </delete>

    <select id="selectAllUserRole" resultType="UserRoleDto">
        SELECT
            role_id AS roleId,
            role_name AS roleName,
            role_kor_name AS roleKorName
        FROM
            user_role
    </select>

    <select id="selectAllUserCount" parameterType="hashmap" resultType="int">
        SELECT
            COUNT(*)
        FROM
            user
        WHERE
            state = true
        <choose>
            <when test="searchValue.length != null and searchValue != ''">
                AND
                    nickname LIKE CONCAT('%', #{searchValue}, '%')
            </when>
        </choose>
        <choose>
            <when test="category != 'all'">
                AND
                    role_id = #{category}
            </when>
        </choose>
    </select>

    <select id="selectUserList" parameterType="hashmap" resultMap="UserResultMap">
        SELECT
            u.user_id AS u_user_id,
            u.nickname AS u_nickname,
            u.social_method AS u_social_method,
            u.role_id AS u_role_id,
            u.join_date AS u_join_date,
            u.state AS u_state,

            ur.role_id AS ur_role_id,
            ur.role_name AS ur_role_name,
            ur.role_kor_name AS ur_role_kor_name,

            COALESCE(COUNT(DISTINCT b.board_id), 0) + COALESCE(COUNT(DISTINCT rb.board_id), 0) AS writeBoardCount,
            COALESCE(COUNT(DISTINCT c.comment_id), 0) + COALESCE(COUNT(DISTINCT rc.comment_id), 0) AS writeCommentCount,
            COALESCE(COUNT(DISTINCT r.report_id), 0) AS reportCount,
            (COALESCE(COUNT(DISTINCT b.board_id), 0) + COALESCE(COUNT(DISTINCT rb.board_id), 0)) * 2 + (COALESCE(COUNT(DISTINCT c.comment_id), 0) + COALESCE(COUNT(DISTINCT rc.comment_id), 0)) AS userScore
        FROM
            user u
        LEFT JOIN
            user_role ur
        ON
            u.role_id = ur.role_id
        LEFT JOIN
            board b
        ON
            u.user_id = b.user_id
        LEFT JOIN
            request_board rb
        ON
            u.user_id = rb.user_id
        LEFT JOIN
            comment c
        ON
            u.user_id = c.user_id
        LEFT JOIN
            request_comment rc
        ON
            u.user_id = rc.user_id
        LEFT JOIN
            report r
        ON
            u.user_id = r.user_id
        WHERE
            u.state = true
        <choose>
            <when test="searchValue.length != null and searchValue != ''">
                AND
                    u.nickname LIKE CONCAT('%', #{searchValue}, '%')
            </when>
        </choose>
        <choose>
            <when test="category != 'all'">
                AND
                    u.role_id = #{category}
            </when>
        </choose>
        GROUP BY
            u.user_id
        LIMIT
            10
        OFFSET
            #{start}
    </select>

</mapper>